module Rack
  class CommonLogger
    def log: (untyped env, untyped status, untyped response_headers, untyped began_at) -> nil
  end
end

module Datadog
  class SinatraMiddleware
    attr_reader app: untyped
    attr_reader logger: untyped

    def initialize: (untyped app, untyped logger) -> void

    def call: (untyped env) -> [Integer, Hash[String, untyped], Array[untyped]]
    def safely_process_request: (untyped env) -> [Integer, Hash[String, untyped], Array[untyped]]
    def log_request: (untyped request, untyped env, Integer status, Hash[String, untyped] headers, Time start_time, Time end_time) -> void
    def calculate_duration: (Time start_time, Time end_time) -> Integer
    def parse_query: (String query_string) -> Hash[String, String]
    def handle_exception: (StandardError exception) -> void
  end
end
